name: 🧪 Pull Request tests

permissions:
  contents: read

on:
  pull_request:
    branches: ["main"]
    types: [opened, reopened, ready_for_review, synchronize]

env:
  NODE_VERSION: "18.20.0"

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  build:
    if: github.event.pull_request.head.repo.full_name == github.repository
    name: 🚧 Build Node
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: 🔶 Check repository
        uses: actions/checkout@v5
      - name: 🟢 Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: 📦 Cache Yarn dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/global
            .yarn/versions
            .yarn/releases
            .yarn/install-state.gz
            .pnp.*
          key: yarn-dependencies-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-dependencies-${{ runner.os }}-
            yarn-dependencies-
      - name: ⚙️ yarn install (cacheable)
        run: yarn install --immutable --check-cache
      - name: 💾 Save updated Yarn cache
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/global
            .yarn/versions
            .yarn/releases
            .yarn/install-state.gz
            .pnp.*
          key: yarn-dependencies-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: ⌛ Run build
        run: yarn build
      - name: 🧪 Install package test
        run: |
          mkdir test-install
          yarn pack --filename test-install/package.tar.gz
          cd test-install
          yarn init -y
          touch yarn.lock
          yarn add -D ./package.tar.gz

  check-eslint:
    name: 📜 Check format
    runs-on: ubuntu-latest
    timeout-minutes: 2
    if: github.event.pull_request.head.repo.full_name == github.repository
    needs: build
    steps:
      - name: 🔶 Check repository
        uses: actions/checkout@v5
      - name: 🟢 Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: 📦 Cache Yarn dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/global
            .yarn/versions
            .yarn/releases
            .yarn/install-state.gz
            .pnp.*
          key: yarn-dependencies-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-dependencies-${{ runner.os }}-
            yarn-dependencies-
      - name: ⚙️ yarn install
        run: yarn install --immutable --check-cache
      - name: ✔️ Run eslint
        run: yarn eslint

  all-test-ok:
    name: ✅ Check all tests
    runs-on: ubuntu-latest
    needs: run-test
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository && always() }}
    steps:
      - name: 🔍 Check test results
        run: |
          echo "Result: ${{ needs.run-test.result }}"
          if [[ "${{ needs.run-test.result }}" != "success" ]]; then
            echo "❌ Some tests failed."
            exit 1
          else
            echo "✅ All tests passed successfully."
          fi

  run-test:
    name: 🗂️ ${{ matrix.database.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: github.event.pull_request.head.repo.full_name == github.repository
    needs: build
    env:
      IMG_CACHE_DIR: ${{ github.workspace }}/.docker-images
    strategy:
      fail-fast: false
      matrix:
        database:
          - name: cockroachdb - 22.2.0
            type: cockroachdb
            use-service: false
            image: cockroachdb/cockroach:v22.2.0
            port: 26257
            run: |
              docker run -d --name roach --hostname roach \
                -p 26257:26257 -p 8080:8080 \
                -e "COCKROACH_INSECURE=true" \
                -e "COCKROACH_USER=root" \
                -e "COCKROACH_PASSWORD=password" \
                cockroachdb/cockroach:v22.2.0 start-single-node --insecure
              sudo apt update && sudo apt install wait-for-it -y
              wait-for-it -h localhost -p 26257
              docker exec roach bash -c "cockroach sql --insecure <<EOF
              CREATE DATABASE IF NOT EXISTS test;
              CREATE USER fastypest;
              GRANT ALL ON DATABASE test TO fastypest;
              EOF"

          - name: cockroachdb - latest
            type: cockroachdb
            use-service: false
            image: cockroachdb/cockroach:latest
            port: 26257
            run: |
              docker run -d --name roach --hostname roach \
                -p 26257:26257 -p 8080:8080 \
                -e "COCKROACH_INSECURE=true" \
                -e "COCKROACH_USER=root" \
                -e "COCKROACH_PASSWORD=password" \
                cockroachdb/cockroach:latest start-single-node --insecure
              sudo apt update && sudo apt install wait-for-it -y
              wait-for-it -h localhost -p 26257
              docker exec roach bash -c "cockroach sql --insecure <<EOF
              CREATE DATABASE IF NOT EXISTS test;
              CREATE USER fastypest;
              GRANT ALL ON DATABASE test TO fastypest;
              EOF"

          - name: mysql - 5.7
            type: mysql
            use-service: true
            service:
              image: "mysql:5.7"
              env:
                MYSQL_ROOT_PASSWORD: password
                MYSQL_USER: fastypest
                MYSQL_PASSWORD: password
                MYSQL_DATABASE: test
                MYSQL_ROOT_HOST: "%"
              ports:
                - 3306:3306
              options: >-
                --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -ppassword"
                --health-interval=10s
                --health-timeout=5s
                --health-retries=3
          - name: mysql - 8.0.36
            type: mysql
            image: mysql:latest
            use-service: false
            port: 3306
            run: |
              sudo service mysql start
              mysql --version
              sudo mysql --user=root --password=root -e "CREATE USER 'fastypest'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';"
              sudo mysql --user=root --password=root -e "GRANT ALL PRIVILEGES ON *.* TO 'fastypest'@'localhost' WITH GRANT OPTION;"
              sudo mysql --user=root --password=root -e "CREATE DATABASE IF NOT EXISTS test;"
              sudo mysql --user=root --password=root -e "GRANT ALL PRIVILEGES ON test.* TO 'fastypest'@'localhost';"
          - name: postgres - 10
            type: postgres
            use-service: true
            service:
              image: "postgres:10"
              env:
                POSTGRES_PASSWORD: password
                POSTGRES_USER: fastypest
                POSTGRES_DB: test
              ports:
                - 5432:5432
              options: >-
                --health-cmd="pg_isready"
                --health-interval=12s
                --health-timeout=7s
                --health-retries=3

          - name: postgres - latest
            type: postgres
            use-service: true
            service:
              image: "postgres"
              env:
                POSTGRES_PASSWORD: password
                POSTGRES_USER: fastypest
                POSTGRES_DB: test
              ports:
                - 5432:5432
              options: >-
                --health-cmd="pg_isready"
                --health-interval=12s
                --health-timeout=7s
                --health-retries=3

          - name: mariadb - 10.11
            type: mariadb
            use-service: true
            service:
              image: "mariadb:10.11"
              env:
                MARIADB_ROOT_PASSWORD: password
                MARIADB_USER: fastypest
                MARIADB_PASSWORD: password
                MARIADB_DATABASE: test
                MARIADB_ROOT_HOST: "%"
              ports:
                - 3306:3306
              options: >-
                --health-cmd="mysqladmin ping"
                --health-interval=12s
                --health-timeout=7s
                --health-retries=3

          - name: mariadb - latest
            type: mariadb
            use-service: true
            service:
              image: "mariadb:latest"
              env:
                MARIADB_ROOT_PASSWORD: password
                MARIADB_USER: fastypest
                MARIADB_PASSWORD: password
                MARIADB_DATABASE: test
                MARIADB_ROOT_HOST: "%"
              ports:
                - 3306:3306
              options: >-
                --health-cmd="healthcheck.sh --connect --innodb_initialized"
                --health-interval=12s
                --health-timeout=7s
                --health-retries=3

    services:
      data-base: ${{matrix.database.service}}

    steps:
      - name: 🔍 Get registry digest
        if: ${{ matrix.database.use-service == false }}
        id: digest
        run: |
          DIGEST=$(docker buildx imagetools inspect \
           --format '{{json .Manifest}}' "${{ matrix.database.image }}" \
          | jq -r '.digest')
          echo "digest=${DIGEST#sha256:}" >>"$GITHUB_OUTPUT"
      - name: ♻️ Restore cached image
        if: ${{ matrix.database.use-service == false }}
        uses: actions/cache@v4
        id: db-cache
        with:
          path: ${{ env.IMG_CACHE_DIR }}
          key: db-img-${{ runner.os }}-${{ matrix.database.image }}-${{ steps.digest.outputs.digest }}
          restore-keys: |
            db-img-${{ runner.os }}-${{ matrix.database.image }}-
      - name: 🐳 docker load (from cache)
        if: ${{ matrix.database.use-service == false && steps.db-cache.outputs.cache-hit == 'true' }}
        run: |
          set -euo pipefail
          IMAGE="${{ matrix.database.image }}"
          FILE_NAME="$(echo "$IMAGE" | tr '/:' '_').tar"
          docker load -i "$IMG_CACHE_DIR/$FILE_NAME"
      - name: 🐳 docker pull (when cache miss)
        if: ${{ matrix.database.use-service == false && steps.db-cache.outputs.cache-hit != 'true' }}
        run: |
          set -euo pipefail
          IMAGE="${{ matrix.database.image }}"
          FILE_NAME="$(echo "$IMAGE" | tr '/:' '_').tar"
          mkdir -p "$IMG_CACHE_DIR"
          docker pull "$IMAGE"
          docker save "$IMAGE" -o "$IMG_CACHE_DIR/$FILE_NAME"
      - name: 💾 Save image to cache
        if: ${{ matrix.database.use-service == false && steps.db-cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.IMG_CACHE_DIR }}
          key: db-img-${{ runner.os }}-${{ matrix.database.image }}-${{ steps.digest.outputs.digest }}
      - if: ${{ matrix.database.use-service == false }}
        name: 🐋 Start a single instance with docker
        run: ${{ matrix.database.run }}
      - name: 🔶 Check repository
        uses: actions/checkout@v5
      - name: 🟢 Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: 📦 Cache Yarn dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/global
            .yarn/versions
            .yarn/releases
            .yarn/install-state.gz
            .pnp.*
          key: yarn-dependencies-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-dependencies-${{ runner.os }}-
            yarn-dependencies-
      - name: ⚙️ yarn install
        run: yarn install --immutable --check-cache
      - name: ⌛ Run build
        run: yarn build
      - name: 🧪 Testing
        env:
          DB_TYPE: ${{ matrix.database.type }}
          DB_PORT: ${{ matrix.database.port }}
        run: yarn test:ci
