name: 🧪 Pull Request tests

permissions:
  contents: read

on:
  pull_request:
    branches: ["main"]
    types: [opened, reopened, ready_for_review, synchronize]

env:
  NODE_VERSION: "18.20.0"

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  build:
    name: 🚧 Build Node
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: 🔶 Check repository
        uses: actions/checkout@v4
      - name: 🟢 Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: ⚙️ yarn install
        run: yarn install --frozen-lockfile
      - name: ⌛ Run build
        run: yarn build

  check-eslint:
    name: 📜 Check format
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: build
    steps:
      - name: 🔶 Check repository
        uses: actions/checkout@v4
      - name: 🟢 Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
      - name: ⚙️ yarn install
        run: yarn install --frozen-lockfile
      - name: ✔️ Run eslint
        run: yarn eslint

  all-test-ok:
    name: ✅ Check all test
    runs-on: ubuntu-latest
    needs: run-test
    if: ${{ always() && needs.run-test.result == 'success' }}  # Esto es clave
    steps:
      - name: ✅ All database tests passed
        run: echo "All database test jobs succeeded."

  run-test:
    name: 🗂️ ${{ matrix.database.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: build
    strategy:
      fail-fast: false
      matrix:
        database:
          - name: cockroachdb - 22.2.0
            type: cockroachdb
            use-service: false
            image: cockroachdb/cockroach:v22.2.0
            port: 26257
            run: |
              docker pull cockroachdb/cockroach:v22.2.0
              docker run -d --name roach --hostname roach \
                -p 26257:26257 -p 8080:8080 \
                -e "COCKROACH_INSECURE=true" \
                -e "COCKROACH_USER=root" \
                -e "COCKROACH_PASSWORD=password" \
                cockroachdb/cockroach:v22.2.0 start-single-node --insecure
              sudo apt update && sudo apt install wait-for-it -y
              wait-for-it -h localhost -p 26257
              docker exec roach bash -c "cockroach sql --insecure <<EOF
              CREATE DATABASE IF NOT EXISTS test;
              CREATE USER fastypest;
              GRANT ALL ON DATABASE test TO fastypest;
              EOF"

          - name: cockroachdb - latest
            type: cockroachdb
            use-service: false
            image: cockroachdb/cockroach:latest
            port: 26257
            run: |
              docker pull cockroachdb/cockroach:latest
              docker run -d --name roach --hostname roach \
                -p 26257:26257 -p 8080:8080 \
                -e "COCKROACH_INSECURE=true" \
                -e "COCKROACH_USER=root" \
                -e "COCKROACH_PASSWORD=password" \
                cockroachdb/cockroach:latest start-single-node --insecure
              sudo apt update && sudo apt install wait-for-it -y
              wait-for-it -h localhost -p 26257
              docker exec roach bash -c "cockroach sql --insecure <<EOF
              CREATE DATABASE IF NOT EXISTS test;
              CREATE USER fastypest;
              GRANT ALL ON DATABASE test TO fastypest;
              EOF"

          - name: mysql - 5.7
            type: mysql
            use-service: true
            service:
              image: "bitnami/mysql:5.7"
              env:
                MYSQL_ROOT_PASSWORD: password
                MYSQL_USER: fastypest
                MYSQL_PASSWORD: password
                MYSQL_ALLOW_EMPTY_PASSWORD: 1
                MYSQL_DATABASE: test
                MYSQL_ROOT_HOST: "%"
                MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
              ports:
                - 3306:3306
              options: >-
                --health-cmd="mysqladmin ping"
                --health-interval=10s
                --health-timeout=5s
                --health-retries=3
          - name: mysql - 8.0.36
            type: mysql
            image: mysql:latest
            use-service: false
            port: 3306
            run: |
              sudo service mysql start
              mysql --version
              sudo mysql --user=root --password=root -e "CREATE USER 'fastypest'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';"
              sudo mysql --user=root --password=root -e "GRANT ALL PRIVILEGES ON *.* TO 'fastypest'@'localhost' WITH GRANT OPTION;"
              sudo mysql --user=root --password=root -e "CREATE DATABASE IF NOT EXISTS test;"
              sudo mysql --user=root --password=root -e "GRANT ALL PRIVILEGES ON test.* TO 'fastypest'@'localhost';"
          - name: postgres - 10
            type: postgres
            use-service: true
            service:
              image: "postgres:10"
              env:
                POSTGRES_PASSWORD: password
                POSTGRES_USER: fastypest
                POSTGRES_DB: test
              ports:
                - 5432:5432
              options: >-
                --health-cmd="pg_isready"
                --health-interval=12s
                --health-timeout=7s
                --health-retries=3

          - name: postgres - latest
            type: postgres
            use-service: true
            service:
              image: "postgres"
              env:
                POSTGRES_PASSWORD: password
                POSTGRES_USER: fastypest
                POSTGRES_DB: test
              ports:
                - 5432:5432
              options: >-
                --health-cmd="pg_isready"
                --health-interval=12s
                --health-timeout=7s
                --health-retries=3

          - name: mariadb - 10.11
            type: mariadb
            use-service: true
            service:
              image: "mariadb:10.11"
              env:
                MARIADB_ROOT_PASSWORD: password
                MARIADB_USER: fastypest
                MARIADB_PASSWORD: password
                MARIADB_DATABASE: test
                MARIADB_ROOT_HOST: "%"
              ports:
                - 3306:3306
              options: >-
                --health-cmd="mysqladmin ping"
                --health-interval=12s
                --health-timeout=7s
                --health-retries=3

          - name: mariadb - latest
            type: mariadb
            use-service: true
            service:
              image: "mariadb:latest"
              env:
                MARIADB_ROOT_PASSWORD: password
                MARIADB_USER: fastypest
                MARIADB_PASSWORD: password
                MARIADB_DATABASE: test
                MARIADB_ROOT_HOST: "%"
              ports:
                - 3306:3306
              options: >-
                --health-cmd="healthcheck.sh --connect --innodb_initialized"
                --health-interval=12s
                --health-timeout=7s
                --health-retries=3

    services:
      data-base: ${{matrix.database.service}}

    steps:
      - if: ${{matrix.database.use-service == false}}
        name: 🐋 Start a single instance with docker
        run: ${{ matrix.database.run }}
      - name: 🔶 Check repository
        uses: actions/checkout@v4
      - name: 🟢 Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
      - name: ⚙️ yarn install
        run: yarn install --frozen-lockfile
      - name: ⌛ Run build
        run: yarn build
      - name: 🧪 Testing
        env:
          DB_TYPE: ${{ matrix.database.type }}
          DB_PORT: ${{ matrix.database.port }}
        run: yarn test:ci
