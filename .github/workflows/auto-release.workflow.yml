name: üîÑ Auto release

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      force:
        description: "Force release"
        required: true
        default: "no"
        type: choice
        options:
          - "yes"
          - "no"
      strategy:
        description: >
          Release strategy (only used if force = yes).
          Ejemplos:
          - major ‚Üí 1.0.0 ‚Üí 2.0.0
          - minor ‚Üí 1.0.0 ‚Üí 1.1.0
          - patch ‚Üí 1.0.0 ‚Üí 1.0.1
          - premajor ‚Üí 1.0.0 ‚Üí 2.0.0-0
          - preminor ‚Üí 1.0.0 ‚Üí 1.1.0-0
          - prepatch ‚Üí 1.0.0 ‚Üí 1.0.1-0
          - prerelease ‚Üí 1.0.0 ‚Üí 1.0.1-0
        required: true
        type: choice
        options:
          - "major"
          - "minor"
          - "patch"
          - "premajor"
          - "preminor"
          - "prepatch"
          - "prerelease"

env:
  NODE_VERSION: "18.20"

jobs:
  release:
    name: üöÄ Auto release
    runs-on: ubuntu-latest
    environment: admin
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_FINE }}
      - name: üïµÔ∏è Check if there are at least 3 new commits since the last version
        id: check_commits
        run: |
          if [[ "${{ github.event.inputs.force }}" == "yes" ]]; then
            echo "enough_commits=true" >> $GITHUB_OUTPUT
            echo "Force release is enabled. Skipping commit check."
          else
            LAST_TAG=$(git tag | sed 's/^v\.//;s/^v//' | sort -V | tail -n 1)
            LAST_TAG="v${LAST_TAG}"
            echo "Last tag: $LAST_TAG"
            COMMITS=$(git log --oneline ${LAST_TAG}..HEAD | wc -l)
            echo "Commits since last tag: $COMMITS"
            if [ $COMMITS -lt 4 ]; then
              echo "There are less than 3 new commits since last release, skipping the rest of the job"
              echo "enough_commits=false" >> $GITHUB_OUTPUT
            else
              echo "enough_commits=true" >> $GITHUB_OUTPUT
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: üé´ Configure Git
        if: steps.check_commits.outputs.enough_commits == 'true'
        run: |
          USER_LOGIN=$(curl -s -H "Authorization: token ${{ secrets.PAT_FINE }}" https://api.github.com/user | jq -r '.login')
          USER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.PAT_FINE }}" https://api.github.com/user | jq -r '.email')
          echo "ACTOR_USERNAME=${USER_LOGIN}" >> $GITHUB_ENV
          git config --global user.name "$USER_LOGIN"
          git config --global user.email "$USER_EMAIL"
      - name: üü¢ Setup Node.js
        if: steps.check_commits.outputs.enough_commits == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "${{ env.NODE_VERSION }}"
          registry-url: "https://registry.npmjs.org/"
          cache: yarn
      - name: ‚öôÔ∏è Install dependencies
        if: steps.check_commits.outputs.enough_commits == 'true'
        run: yarn install --immutable --check-cache
      - name: üÜô Bump version and create a git tag
        if: steps.check_commits.outputs.enough_commits == 'true'
        run: |
          git checkout main
          git pull origin main
          git checkout -b release/${{ github.run_number }}
          EXISTS=$(git ls-remote --heads origin release/${{ github.run_number }} | wc -l)
          if [ $EXISTS -eq 1 ]; then
            git pull origin release/${{ github.run_number }}
          fi
          STRATEGY="patch"
          if [[ "${{ github.event.inputs.force }}" == "yes" && "${{ github.event.inputs.strategy }}" ]]; then
            STRATEGY=${{ github.event.inputs.strategy }}
          fi

          # Determine current major.minor from package.json to construct tag-prefix
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TAG_PREFIX_VALUE="v$(echo $CURRENT_VERSION | awk -F. '{print $1 FS $2}')." # Results in "v1.4." (using awk for robustness)

          echo "Using tag prefix: ${TAG_PREFIX_VALUE} for standard-version"
          yarn release --release-as $STRATEGY --tag-prefix "${TAG_PREFIX_VALUE}"
          git push --follow-tags origin release/${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FINE }}
      - name: ‚è±Ô∏è Wait for changes to be registered
        if: steps.check_commits.outputs.enough_commits == 'true'
        timeout-minutes: 2
        run: |
          while true; do
            git fetch origin
            DIFF=$(git diff main..release/${{ github.run_number }})
            echo "$DIFF"
            if [ "$DIFF" != "" ]; then
              break
            fi
            echo "Waiting for changes to be registered..."
            sleep 5s
          done
      - name: üè∑Ô∏è Get last existing tag
        if: steps.check_commits.outputs.enough_commits == 'true'
        id: get_new_tag
        run: |
          LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [ -z "$LAST_TAG" ]; then
            echo "No tag found, exiting"
            exit 1
          fi
          echo "Last tag found: $LAST_TAG"
          echo "lastTag=$LAST_TAG" >> $GITHUB_OUTPUT
      - name: üìù Create pull request
        if: steps.check_commits.outputs.enough_commits == 'true'
        id: create_pr
        run: |
          PR_DATA=$(curl \
            -X POST \
            -H "Authorization: token ${{ secrets.PAT_FINE }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{
              "title": "Bump version to ${{ steps.get_new_tag.outputs.lastTag }}",
              "body": "Bumps version to ${{ steps.get_new_tag.outputs.lastTag }}",
              "head": "release/${{ github.run_number }}",
              "base": "main"
            }')
          PR_NUMBER=$(echo "$PR_DATA" | jq '.number')

          curl \
          -X POST \
          -H "Authorization: token ${{ secrets.PAT_FINE }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels \
          -d '{
            "labels": ["auto-release"]
          }'
          echo "Detected PR number: $PR_NUMBER"
          echo "prNumber=$PR_NUMBER" >> $GITHUB_OUTPUT
      - name: üë§ Assign PR to user
        if: steps.check_commits.outputs.enough_commits == 'true'
        run: gh pr edit ${{ steps.create_pr.outputs.prNumber }} --add-assignee "${{ env.ACTOR_USERNAME }}"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FINE }}
      - name: üïµÔ∏è Check if PR is approved
        if: steps.check_commits.outputs.enough_commits == 'true'
        uses: actions/github-script@v7
        timeout-minutes: 5
        env:
          PULL_REQUEST_NUMBER: ${{ steps.create_pr.outputs.prNumber }}
        with:
          script: |
            const timeout = 5 * 60 * 1000; // 5 minutes
            const interval = 5 * 1000; // 5 seconds
            const startTime = Date.now();
            const prNumber = process.env.PULL_REQUEST_NUMBER;
            console.log('PR number:', prNumber);

            while (Date.now() - startTime < timeout) {
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              const approved = reviews.some(review => review.state === 'APPROVED');
              if (approved) {
                console.log(`PR #${prNumber} has been approved`);
                return;
              }

              await new Promise(resolve => setTimeout(resolve, interval));
            }

            throw new Error('PR approval timed out');
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: ‚åõ Wait for all checks to pass
        if: steps.check_commits.outputs.enough_commits == 'true'
        uses: actions/github-script@v7
        timeout-minutes: 5
        env:
          PULL_REQUEST_NUMBER: ${{ steps.create_pr.outputs.prNumber }}
          PAT_FINE: ${{ secrets.PAT_FINE }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = process.env.PULL_REQUEST_NUMBER;
            const { owner, repo } = context.repo;
            const timeout = 5 * 60 * 1000; // 5 minutes
            const interval = 5000; // 5 seconds
            const deadline = Date.now() + timeout;

            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
            const ref = pr.head.sha;

            console.log(`‚åõ Waiting for all checks on PR #${prNumber}...`);
            while (Date.now() < deadline) {
              const { data: checks } = await github.rest.checks.listForRef({
                owner,
                repo,
                ref
              });

              const expectedChecks = checks.check_runs.filter(run => run.conclusion !== 'skipped');
              const passedChecks = expectedChecks.filter(run => run.status === 'completed' && run.conclusion === 'success').length;
              const allPassed = passedChecks === expectedChecks.length;

              if (allPassed) {
                console.log(`‚úÖ All checks passed! Proceeding to approve the PR #${prNumber}`);
                break;
              }

              const anyFailed = expectedChecks.some(run => run.conclusion === 'failure');
              if (anyFailed) throw new Error(`‚ùå Some checks failed for PR #${prNumber}.`);

              console.log(`‚è≥ Waiting for all checks to pass (${passedChecks}/${expectedChecks.length}). Retrying in ${interval / 1000}s...`);
              await new Promise(resolve => setTimeout(resolve, interval));
            }
      - name: ‚úÖ Merge PR
        if: steps.check_commits.outputs.enough_commits == 'true'
        uses: actions/github-script@v7
        env:
          PULL_REQUEST_NUMBER: ${{ steps.create_pr.outputs.prNumber }}
        with:
          github-token: ${{ secrets.PAT_FINE }}
          script: |
            const prNumber = process.env.PULL_REQUEST_NUMBER;
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'squash'
            });
            console.log(`‚úÖ PR #${prNumber} successfully merged as squash.`);
      - name: üöß Run build
        if: steps.check_commits.outputs.enough_commits == 'true'
        run: yarn run build
      - name: üß™ Install package test
        run: |
          mkdir test-install
          yarn pack --filename test-install/package.tar.gz
          cd test-install
          yarn init -y
          touch yarn.lock
          yarn add -D ./package.tar.gz
      - name: üéâ Publish to npm
        if: steps.check_commits.outputs.enough_commits == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}
      - name: üì¶ Create Release
        if: steps.check_commits.outputs.enough_commits == 'true'
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ steps.get_new_tag.outputs.lastTag }}
          name: Release ${{ steps.get_new_tag.outputs.lastTag }}
          draft: false
          prerelease: false
          makeLatest: true
      - name: üßπ Cleanup on failure or cancellation
        if: ${{ failure() || cancelled() }}
        uses: actions/github-script@v7
        with:
          script: |
            const runNumber = ${{ github.run_number }};
            const newTag = '${{ steps.get_new_tag.outputs.lastTag }}';
            const { owner, repo } = context.repo;
            // Delete branch
            try {
              if (await github.rest.git.getRef({ owner, repo, ref: `heads/release/${runNumber}` })) {
                await github.rest.git.deleteRef({ owner, repo, ref: `heads/release/${runNumber}` });
                console.log(`Deleted branch release/${runNumber}`);
              }
            } catch (error) {
              console.log(`Branch release/${runNumber} not found`);
            }
            // Delete tag
            try {
              if (await github.rest.git.getRef({ owner, repo, ref: `tags/${newTag}` })) {
                await github.rest.git.deleteRef({ owner, repo, ref: `tags/${newTag}` });
                console.log(`Deleted tag ${newTag}`);
              }
            } catch (error) {
              console.log(`Tag ${newTag} not found`);
            }
            // Delete release
            try {
              const { data: releases } = await github.rest.repos.listReleases({ owner, repo });
              const release = releases.find(r => r.tag_name === newTag);
              if (release) {
                await github.rest.repos.deleteRelease({ owner, repo, release_id: release.id });
                console.log(`Deleted release ${newTag}`);
              }
            } catch (error) {
              console.log(`Release ${newTag} not found`);
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}
